{"remainingRequest":"C:\\Users\\Chris\\Desktop\\Marcaje\\retomando29092018\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Chris\\Desktop\\Marcaje\\retomando29092018\\node_modules\\rxjs\\_esm5\\internal\\util\\subscribeTo.js","dependencies":[{"path":"C:\\Users\\Chris\\Desktop\\Marcaje\\retomando29092018\\node_modules\\rxjs\\_esm5\\internal\\util\\subscribeTo.js","mtime":1538244219905},{"path":"C:\\Users\\Chris\\Desktop\\Marcaje\\retomando29092018\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1538244206341},{"path":"C:\\Users\\Chris\\Desktop\\Marcaje\\retomando29092018\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1538244190919}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _Observable,_subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */\r\nimport { Observable } from '../Observable';\r\nimport { subscribeToArray } from './subscribeToArray';\r\nimport { subscribeToPromise } from './subscribeToPromise';\r\nimport { subscribeToIterable } from './subscribeToIterable';\r\nimport { subscribeToObservable } from './subscribeToObservable';\r\nimport { isArrayLike } from './isArrayLike';\r\nimport { isPromise } from './isPromise';\r\nimport { isObject } from './isObject';\r\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\r\nimport { observable as Symbol_observable } from '../symbol/observable';\r\nexport var subscribeTo = function (result) {\r\n    if (result instanceof Observable) {\r\n        return function (subscriber) {\r\n            if (result._isScalar) {\r\n                subscriber.next(result.value);\r\n                subscriber.complete();\r\n                return undefined;\r\n            }\r\n            else {\r\n                return result.subscribe(subscriber);\r\n            }\r\n        };\r\n    }\r\n    else if (result && typeof result[Symbol_observable] === 'function') {\r\n        return subscribeToObservable(result);\r\n    }\r\n    else if (isArrayLike(result)) {\r\n        return subscribeToArray(result);\r\n    }\r\n    else if (isPromise(result)) {\r\n        return subscribeToPromise(result);\r\n    }\r\n    else if (result && typeof result[Symbol_iterator] === 'function') {\r\n        return subscribeToIterable(result);\r\n    }\r\n    else {\r\n        var value = isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\r\n        var msg = \"You provided \" + value + \" where a stream was expected.\"\r\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\r\n        throw new TypeError(msg);\r\n    }\r\n};\r\n//# sourceMappingURL=subscribeTo.js.map\r\n",null]}