{"remainingRequest":"C:\\Users\\Chris\\Desktop\\Marcaje\\retomando29092018\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Chris\\Desktop\\Marcaje\\retomando29092018\\node_modules\\rxjs\\_esm5\\internal\\observable\\dom\\WebSocketSubject.js","dependencies":[{"path":"C:\\Users\\Chris\\Desktop\\Marcaje\\retomando29092018\\node_modules\\rxjs\\_esm5\\internal\\observable\\dom\\WebSocketSubject.js","mtime":1538244219742},{"path":"C:\\Users\\Chris\\Desktop\\Marcaje\\retomando29092018\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1538244206341},{"path":"C:\\Users\\Chris\\Desktop\\Marcaje\\retomando29092018\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1538244190919}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START tslib,_.._Subject,_.._Subscriber,_.._Observable,_.._Subscription,_.._ReplaySubject,_.._util_tryCatch,_.._util_errorObject PURE_IMPORTS_END */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { Subject, AnonymousSubject } from '../../Subject';\r\nimport { Subscriber } from '../../Subscriber';\r\nimport { Observable } from '../../Observable';\r\nimport { Subscription } from '../../Subscription';\r\nimport { ReplaySubject } from '../../ReplaySubject';\r\nimport { tryCatch } from '../../util/tryCatch';\r\nimport { errorObject } from '../../util/errorObject';\r\nvar DEFAULT_WEBSOCKET_CONFIG = {\r\n    url: '',\r\n    deserializer: function (e) { return JSON.parse(e.data); },\r\n    serializer: function (value) { return JSON.stringify(value); },\r\n};\r\nvar WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT = 'WebSocketSubject.error must be called with an object with an error code, and an optional reason: { code: number, reason: string }';\r\nvar WebSocketSubject = /*@__PURE__*/ (function (_super) {\r\n    tslib_1.__extends(WebSocketSubject, _super);\r\n    function WebSocketSubject(urlConfigOrSource, destination) {\r\n        var _this = _super.call(this) || this;\r\n        if (urlConfigOrSource instanceof Observable) {\r\n            _this.destination = destination;\r\n            _this.source = urlConfigOrSource;\r\n        }\r\n        else {\r\n            var config = _this._config = tslib_1.__assign({}, DEFAULT_WEBSOCKET_CONFIG);\r\n            _this._output = new Subject();\r\n            if (typeof urlConfigOrSource === 'string') {\r\n                config.url = urlConfigOrSource;\r\n            }\r\n            else {\r\n                for (var key in urlConfigOrSource) {\r\n                    if (urlConfigOrSource.hasOwnProperty(key)) {\r\n                        config[key] = urlConfigOrSource[key];\r\n                    }\r\n                }\r\n            }\r\n            if (!config.WebSocketCtor && WebSocket) {\r\n                config.WebSocketCtor = WebSocket;\r\n            }\r\n            else if (!config.WebSocketCtor) {\r\n                throw new Error('no WebSocket constructor can be found');\r\n            }\r\n            _this.destination = new ReplaySubject();\r\n        }\r\n        return _this;\r\n    }\r\n    WebSocketSubject.prototype.lift = function (operator) {\r\n        var sock = new WebSocketSubject(this._config, this.destination);\r\n        sock.operator = operator;\r\n        sock.source = this;\r\n        return sock;\r\n    };\r\n    WebSocketSubject.prototype._resetState = function () {\r\n        this._socket = null;\r\n        if (!this.source) {\r\n            this.destination = new ReplaySubject();\r\n        }\r\n        this._output = new Subject();\r\n    };\r\n    WebSocketSubject.prototype.multiplex = function (subMsg, unsubMsg, messageFilter) {\r\n        var self = this;\r\n        return new Observable(function (observer) {\r\n            var result = tryCatch(subMsg)();\r\n            if (result === errorObject) {\r\n                observer.error(errorObject.e);\r\n            }\r\n            else {\r\n                self.next(result);\r\n            }\r\n            var subscription = self.subscribe(function (x) {\r\n                var result = tryCatch(messageFilter)(x);\r\n                if (result === errorObject) {\r\n                    observer.error(errorObject.e);\r\n                }\r\n                else if (result) {\r\n                    observer.next(x);\r\n                }\r\n            }, function (err) { return observer.error(err); }, function () { return observer.complete(); });\r\n            return function () {\r\n                var result = tryCatch(unsubMsg)();\r\n                if (result === errorObject) {\r\n                    observer.error(errorObject.e);\r\n                }\r\n                else {\r\n                    self.next(result);\r\n                }\r\n                subscription.unsubscribe();\r\n            };\r\n        });\r\n    };\r\n    WebSocketSubject.prototype._connectSocket = function () {\r\n        var _this = this;\r\n        var _a = this._config, WebSocketCtor = _a.WebSocketCtor, protocol = _a.protocol, url = _a.url, binaryType = _a.binaryType;\r\n        var observer = this._output;\r\n        var socket = null;\r\n        try {\r\n            socket = protocol ?\r\n                new WebSocketCtor(url, protocol) :\r\n                new WebSocketCtor(url);\r\n            this._socket = socket;\r\n            if (binaryType) {\r\n                this._socket.binaryType = binaryType;\r\n            }\r\n        }\r\n        catch (e) {\r\n            observer.error(e);\r\n            return;\r\n        }\r\n        var subscription = new Subscription(function () {\r\n            _this._socket = null;\r\n            if (socket && socket.readyState === 1) {\r\n                socket.close();\r\n            }\r\n        });\r\n        socket.onopen = function (e) {\r\n            var openObserver = _this._config.openObserver;\r\n            if (openObserver) {\r\n                openObserver.next(e);\r\n            }\r\n            var queue = _this.destination;\r\n            _this.destination = Subscriber.create(function (x) {\r\n                if (socket.readyState === 1) {\r\n                    var serializer = _this._config.serializer;\r\n                    var msg = tryCatch(serializer)(x);\r\n                    if (msg === errorObject) {\r\n                        _this.destination.error(errorObject.e);\r\n                        return;\r\n                    }\r\n                    socket.send(msg);\r\n                }\r\n            }, function (e) {\r\n                var closingObserver = _this._config.closingObserver;\r\n                if (closingObserver) {\r\n                    closingObserver.next(undefined);\r\n                }\r\n                if (e && e.code) {\r\n                    socket.close(e.code, e.reason);\r\n                }\r\n                else {\r\n                    observer.error(new TypeError(WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT));\r\n                }\r\n                _this._resetState();\r\n            }, function () {\r\n                var closingObserver = _this._config.closingObserver;\r\n                if (closingObserver) {\r\n                    closingObserver.next(undefined);\r\n                }\r\n                socket.close();\r\n                _this._resetState();\r\n            });\r\n            if (queue && queue instanceof ReplaySubject) {\r\n                subscription.add(queue.subscribe(_this.destination));\r\n            }\r\n        };\r\n        socket.onerror = function (e) {\r\n            _this._resetState();\r\n            observer.error(e);\r\n        };\r\n        socket.onclose = function (e) {\r\n            _this._resetState();\r\n            var closeObserver = _this._config.closeObserver;\r\n            if (closeObserver) {\r\n                closeObserver.next(e);\r\n            }\r\n            if (e.wasClean) {\r\n                observer.complete();\r\n            }\r\n            else {\r\n                observer.error(e);\r\n            }\r\n        };\r\n        socket.onmessage = function (e) {\r\n            var deserializer = _this._config.deserializer;\r\n            var result = tryCatch(deserializer)(e);\r\n            if (result === errorObject) {\r\n                observer.error(errorObject.e);\r\n            }\r\n            else {\r\n                observer.next(result);\r\n            }\r\n        };\r\n    };\r\n    WebSocketSubject.prototype._subscribe = function (subscriber) {\r\n        var _this = this;\r\n        var source = this.source;\r\n        if (source) {\r\n            return source.subscribe(subscriber);\r\n        }\r\n        if (!this._socket) {\r\n            this._connectSocket();\r\n        }\r\n        this._output.subscribe(subscriber);\r\n        subscriber.add(function () {\r\n            var _socket = _this._socket;\r\n            if (_this._output.observers.length === 0) {\r\n                if (_socket && _socket.readyState === 1) {\r\n                    _socket.close();\r\n                }\r\n                _this._resetState();\r\n            }\r\n        });\r\n        return subscriber;\r\n    };\r\n    WebSocketSubject.prototype.unsubscribe = function () {\r\n        var _a = this, source = _a.source, _socket = _a._socket;\r\n        if (_socket && _socket.readyState === 1) {\r\n            _socket.close();\r\n            this._resetState();\r\n        }\r\n        _super.prototype.unsubscribe.call(this);\r\n        if (!source) {\r\n            this.destination = new ReplaySubject();\r\n        }\r\n    };\r\n    return WebSocketSubject;\r\n}(AnonymousSubject));\r\nexport { WebSocketSubject };\r\n//# sourceMappingURL=WebSocketSubject.js.map\r\n",null]}