{"remainingRequest":"C:\\Users\\Chris\\Desktop\\Marcaje\\retomando29092018\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Chris\\Desktop\\Marcaje\\retomando29092018\\node_modules\\rxjs\\_esm5\\internal\\scheduler\\AsyncScheduler.js","dependencies":[{"path":"C:\\Users\\Chris\\Desktop\\Marcaje\\retomando29092018\\node_modules\\rxjs\\_esm5\\internal\\scheduler\\AsyncScheduler.js","mtime":1538244219869},{"path":"C:\\Users\\Chris\\Desktop\\Marcaje\\retomando29092018\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1538244206341},{"path":"C:\\Users\\Chris\\Desktop\\Marcaje\\retomando29092018\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1538244190919}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START tslib,_Scheduler PURE_IMPORTS_END */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { Scheduler } from '../Scheduler';\r\nvar AsyncScheduler = /*@__PURE__*/ (function (_super) {\r\n    tslib_1.__extends(AsyncScheduler, _super);\r\n    function AsyncScheduler(SchedulerAction, now) {\r\n        if (now === void 0) {\r\n            now = Scheduler.now;\r\n        }\r\n        var _this = _super.call(this, SchedulerAction, function () {\r\n            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {\r\n                return AsyncScheduler.delegate.now();\r\n            }\r\n            else {\r\n                return now();\r\n            }\r\n        }) || this;\r\n        _this.actions = [];\r\n        _this.active = false;\r\n        _this.scheduled = undefined;\r\n        return _this;\r\n    }\r\n    AsyncScheduler.prototype.schedule = function (work, delay, state) {\r\n        if (delay === void 0) {\r\n            delay = 0;\r\n        }\r\n        if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\r\n            return AsyncScheduler.delegate.schedule(work, delay, state);\r\n        }\r\n        else {\r\n            return _super.prototype.schedule.call(this, work, delay, state);\r\n        }\r\n    };\r\n    AsyncScheduler.prototype.flush = function (action) {\r\n        var actions = this.actions;\r\n        if (this.active) {\r\n            actions.push(action);\r\n            return;\r\n        }\r\n        var error;\r\n        this.active = true;\r\n        do {\r\n            if (error = action.execute(action.state, action.delay)) {\r\n                break;\r\n            }\r\n        } while (action = actions.shift());\r\n        this.active = false;\r\n        if (error) {\r\n            while (action = actions.shift()) {\r\n                action.unsubscribe();\r\n            }\r\n            throw error;\r\n        }\r\n    };\r\n    return AsyncScheduler;\r\n}(Scheduler));\r\nexport { AsyncScheduler };\r\n//# sourceMappingURL=AsyncScheduler.js.map\r\n",null]}