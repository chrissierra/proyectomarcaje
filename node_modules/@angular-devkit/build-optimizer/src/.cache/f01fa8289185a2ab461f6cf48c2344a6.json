{"remainingRequest":"C:\\Users\\Chris\\Desktop\\Marcaje\\retomando29092018\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Chris\\Desktop\\Marcaje\\retomando29092018\\node_modules\\rxjs\\_esm5\\internal\\observable\\forkJoin.js","dependencies":[{"path":"C:\\Users\\Chris\\Desktop\\Marcaje\\retomando29092018\\node_modules\\rxjs\\_esm5\\internal\\observable\\forkJoin.js","mtime":1538244219745},{"path":"C:\\Users\\Chris\\Desktop\\Marcaje\\retomando29092018\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1538244206341},{"path":"C:\\Users\\Chris\\Desktop\\Marcaje\\retomando29092018\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1538244190919}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START tslib,_Observable,_util_isArray,_empty,_util_subscribeToResult,_OuterSubscriber,_operators_map PURE_IMPORTS_END */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { Observable } from '../Observable';\r\nimport { isArray } from '../util/isArray';\r\nimport { EMPTY } from './empty';\r\nimport { subscribeToResult } from '../util/subscribeToResult';\r\nimport { OuterSubscriber } from '../OuterSubscriber';\r\nimport { map } from '../operators/map';\r\nexport function forkJoin() {\r\n    var sources = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        sources[_i] = arguments[_i];\r\n    }\r\n    var resultSelector;\r\n    if (typeof sources[sources.length - 1] === 'function') {\r\n        resultSelector = sources.pop();\r\n    }\r\n    if (sources.length === 1 && isArray(sources[0])) {\r\n        sources = sources[0];\r\n    }\r\n    if (sources.length === 0) {\r\n        return EMPTY;\r\n    }\r\n    if (resultSelector) {\r\n        return forkJoin(sources).pipe(map(function (args) { return resultSelector.apply(void 0, args); }));\r\n    }\r\n    return new Observable(function (subscriber) {\r\n        return new ForkJoinSubscriber(subscriber, sources);\r\n    });\r\n}\r\nvar ForkJoinSubscriber = /*@__PURE__*/ (function (_super) {\r\n    tslib_1.__extends(ForkJoinSubscriber, _super);\r\n    function ForkJoinSubscriber(destination, sources) {\r\n        var _this = _super.call(this, destination) || this;\r\n        _this.sources = sources;\r\n        _this.completed = 0;\r\n        _this.haveValues = 0;\r\n        var len = sources.length;\r\n        _this.values = new Array(len);\r\n        for (var i = 0; i < len; i++) {\r\n            var source = sources[i];\r\n            var innerSubscription = subscribeToResult(_this, source, null, i);\r\n            if (innerSubscription) {\r\n                _this.add(innerSubscription);\r\n            }\r\n        }\r\n        return _this;\r\n    }\r\n    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\r\n        this.values[outerIndex] = innerValue;\r\n        if (!innerSub._hasValue) {\r\n            innerSub._hasValue = true;\r\n            this.haveValues++;\r\n        }\r\n    };\r\n    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {\r\n        var _a = this, destination = _a.destination, haveValues = _a.haveValues, values = _a.values;\r\n        var len = values.length;\r\n        if (!innerSub._hasValue) {\r\n            destination.complete();\r\n            return;\r\n        }\r\n        this.completed++;\r\n        if (this.completed !== len) {\r\n            return;\r\n        }\r\n        if (haveValues === len) {\r\n            destination.next(values);\r\n        }\r\n        destination.complete();\r\n    };\r\n    return ForkJoinSubscriber;\r\n}(OuterSubscriber));\r\n//# sourceMappingURL=forkJoin.js.map\r\n",null]}