{"remainingRequest":"C:\\Users\\Chris\\Desktop\\Marcaje\\retomando29092018\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Chris\\Desktop\\Marcaje\\retomando29092018\\node_modules\\rxjs\\_esm5\\internal\\observable\\fromEvent.js","dependencies":[{"path":"C:\\Users\\Chris\\Desktop\\Marcaje\\retomando29092018\\node_modules\\rxjs\\_esm5\\internal\\observable\\fromEvent.js","mtime":1538244219749},{"path":"C:\\Users\\Chris\\Desktop\\Marcaje\\retomando29092018\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1538244206341},{"path":"C:\\Users\\Chris\\Desktop\\Marcaje\\retomando29092018\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1538244190919}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */\r\nimport { Observable } from '../Observable';\r\nimport { isArray } from '../util/isArray';\r\nimport { isFunction } from '../util/isFunction';\r\nimport { map } from '../operators/map';\r\nvar toString = Object.prototype.toString;\r\nexport function fromEvent(target, eventName, options, resultSelector) {\r\n    if (isFunction(options)) {\r\n        resultSelector = options;\r\n        options = undefined;\r\n    }\r\n    if (resultSelector) {\r\n        return fromEvent(target, eventName, options).pipe(map(function (args) { return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));\r\n    }\r\n    return new Observable(function (subscriber) {\r\n        function handler(e) {\r\n            if (arguments.length > 1) {\r\n                subscriber.next(Array.prototype.slice.call(arguments));\r\n            }\r\n            else {\r\n                subscriber.next(e);\r\n            }\r\n        }\r\n        setupSubscription(target, eventName, handler, subscriber, options);\r\n    });\r\n}\r\nfunction setupSubscription(sourceObj, eventName, handler, subscriber, options) {\r\n    var unsubscribe;\r\n    if (isEventTarget(sourceObj)) {\r\n        var source_1 = sourceObj;\r\n        sourceObj.addEventListener(eventName, handler, options);\r\n        unsubscribe = function () { return source_1.removeEventListener(eventName, handler, options); };\r\n    }\r\n    else if (isJQueryStyleEventEmitter(sourceObj)) {\r\n        var source_2 = sourceObj;\r\n        sourceObj.on(eventName, handler);\r\n        unsubscribe = function () { return source_2.off(eventName, handler); };\r\n    }\r\n    else if (isNodeStyleEventEmitter(sourceObj)) {\r\n        var source_3 = sourceObj;\r\n        sourceObj.addListener(eventName, handler);\r\n        unsubscribe = function () { return source_3.removeListener(eventName, handler); };\r\n    }\r\n    else if (sourceObj && sourceObj.length) {\r\n        for (var i = 0, len = sourceObj.length; i < len; i++) {\r\n            setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\r\n        }\r\n    }\r\n    else {\r\n        throw new TypeError('Invalid event target');\r\n    }\r\n    subscriber.add(unsubscribe);\r\n}\r\nfunction isNodeStyleEventEmitter(sourceObj) {\r\n    return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\r\n}\r\nfunction isJQueryStyleEventEmitter(sourceObj) {\r\n    return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\r\n}\r\nfunction isEventTarget(sourceObj) {\r\n    return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\r\n}\r\n//# sourceMappingURL=fromEvent.js.map\r\n",null]}