{"remainingRequest":"C:\\Users\\Chris\\Desktop\\Marcaje\\retomando29092018\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Chris\\Desktop\\Marcaje\\retomando29092018\\node_modules\\rxjs\\_esm5\\internal\\scheduler\\AsyncAction.js","dependencies":[{"path":"C:\\Users\\Chris\\Desktop\\Marcaje\\retomando29092018\\node_modules\\rxjs\\_esm5\\internal\\scheduler\\AsyncAction.js","mtime":1538244219868},{"path":"C:\\Users\\Chris\\Desktop\\Marcaje\\retomando29092018\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1538244206341},{"path":"C:\\Users\\Chris\\Desktop\\Marcaje\\retomando29092018\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1538244190919}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START tslib,_Action PURE_IMPORTS_END */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { Action } from './Action';\r\nvar AsyncAction = /*@__PURE__*/ (function (_super) {\r\n    tslib_1.__extends(AsyncAction, _super);\r\n    function AsyncAction(scheduler, work) {\r\n        var _this = _super.call(this, scheduler, work) || this;\r\n        _this.scheduler = scheduler;\r\n        _this.work = work;\r\n        _this.pending = false;\r\n        return _this;\r\n    }\r\n    AsyncAction.prototype.schedule = function (state, delay) {\r\n        if (delay === void 0) {\r\n            delay = 0;\r\n        }\r\n        if (this.closed) {\r\n            return this;\r\n        }\r\n        this.state = state;\r\n        var id = this.id;\r\n        var scheduler = this.scheduler;\r\n        if (id != null) {\r\n            this.id = this.recycleAsyncId(scheduler, id, delay);\r\n        }\r\n        this.pending = true;\r\n        this.delay = delay;\r\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\r\n        return this;\r\n    };\r\n    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\r\n        if (delay === void 0) {\r\n            delay = 0;\r\n        }\r\n        return setInterval(scheduler.flush.bind(scheduler, this), delay);\r\n    };\r\n    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\r\n        if (delay === void 0) {\r\n            delay = 0;\r\n        }\r\n        if (delay !== null && this.delay === delay && this.pending === false) {\r\n            return id;\r\n        }\r\n        clearInterval(id);\r\n    };\r\n    AsyncAction.prototype.execute = function (state, delay) {\r\n        if (this.closed) {\r\n            return new Error('executing a cancelled action');\r\n        }\r\n        this.pending = false;\r\n        var error = this._execute(state, delay);\r\n        if (error) {\r\n            return error;\r\n        }\r\n        else if (this.pending === false && this.id != null) {\r\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\r\n        }\r\n    };\r\n    AsyncAction.prototype._execute = function (state, delay) {\r\n        var errored = false;\r\n        var errorValue = undefined;\r\n        try {\r\n            this.work(state);\r\n        }\r\n        catch (e) {\r\n            errored = true;\r\n            errorValue = !!e && e || new Error(e);\r\n        }\r\n        if (errored) {\r\n            this.unsubscribe();\r\n            return errorValue;\r\n        }\r\n    };\r\n    AsyncAction.prototype._unsubscribe = function () {\r\n        var id = this.id;\r\n        var scheduler = this.scheduler;\r\n        var actions = scheduler.actions;\r\n        var index = actions.indexOf(this);\r\n        this.work = null;\r\n        this.state = null;\r\n        this.pending = false;\r\n        this.scheduler = null;\r\n        if (index !== -1) {\r\n            actions.splice(index, 1);\r\n        }\r\n        if (id != null) {\r\n            this.id = this.recycleAsyncId(scheduler, id, null);\r\n        }\r\n        this.delay = null;\r\n    };\r\n    return AsyncAction;\r\n}(Action));\r\nexport { AsyncAction };\r\n//# sourceMappingURL=AsyncAction.js.map\r\n",null]}