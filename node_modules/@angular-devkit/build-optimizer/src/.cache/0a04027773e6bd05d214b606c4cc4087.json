{"remainingRequest":"C:\\Users\\Chris\\Desktop\\Marcaje\\retomando29092018\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Chris\\Desktop\\Marcaje\\retomando29092018\\node_modules\\rxjs\\_esm5\\internal\\observable\\fromIterable.js","dependencies":[{"path":"C:\\Users\\Chris\\Desktop\\Marcaje\\retomando29092018\\node_modules\\rxjs\\_esm5\\internal\\observable\\fromIterable.js","mtime":1538244219751},{"path":"C:\\Users\\Chris\\Desktop\\Marcaje\\retomando29092018\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1538244206341},{"path":"C:\\Users\\Chris\\Desktop\\Marcaje\\retomando29092018\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1538244190919}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_iterator,_util_subscribeToIterable PURE_IMPORTS_END */\r\nimport { Observable } from '../Observable';\r\nimport { Subscription } from '../Subscription';\r\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\r\nimport { subscribeToIterable } from '../util/subscribeToIterable';\r\nexport function fromIterable(input, scheduler) {\r\n    if (!input) {\r\n        throw new Error('Iterable cannot be null');\r\n    }\r\n    if (!scheduler) {\r\n        return new Observable(subscribeToIterable(input));\r\n    }\r\n    else {\r\n        return new Observable(function (subscriber) {\r\n            var sub = new Subscription();\r\n            var iterator;\r\n            sub.add(function () {\r\n                if (iterator && typeof iterator.return === 'function') {\r\n                    iterator.return();\r\n                }\r\n            });\r\n            sub.add(scheduler.schedule(function () {\r\n                iterator = input[Symbol_iterator]();\r\n                sub.add(scheduler.schedule(function () {\r\n                    if (subscriber.closed) {\r\n                        return;\r\n                    }\r\n                    var value;\r\n                    var done;\r\n                    try {\r\n                        var result = iterator.next();\r\n                        value = result.value;\r\n                        done = result.done;\r\n                    }\r\n                    catch (err) {\r\n                        subscriber.error(err);\r\n                        return;\r\n                    }\r\n                    if (done) {\r\n                        subscriber.complete();\r\n                    }\r\n                    else {\r\n                        subscriber.next(value);\r\n                        this.schedule();\r\n                    }\r\n                }));\r\n            }));\r\n            return sub;\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=fromIterable.js.map\r\n",null]}